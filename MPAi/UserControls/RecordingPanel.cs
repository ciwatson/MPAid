using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using MPAi.Models;
using MPAi.Cores;
using MPAi.Forms;
using System.IO;

namespace MPAi.UserControls
{
    /// <summary>
    /// Class for the listbox with which to select the word/sound to compare.
    /// </summary>
    public partial class RecordingPanel : UserControl
    {
        /// <summary>
        /// The list of speakers.
        /// </summary>
        public ComboBox SpeakerComboBox
        {
            get { return speakerComboBox; }
        }
        /// <summary>
        /// The list of categories.
        /// </summary>
        public ComboBox CategoryComboBox
        {
            get { return categoryComboBox; }
        }
        /// <summary>
        /// The list of words.
        /// </summary>
        public ListBox WordListBox
        {
            get { return wordListBox; }
        }
        /// <summary>
        /// Default constructor. 
        /// </summary>
        public RecordingPanel()
        {
            InitializeComponent();
        }
        /// <summary>
        /// Fills or updates the speaker and category combo boxes.
        /// </summary>
        public void DataBinding()
        {
            this.speakerComboBox.DataSource = MainForm.self.DBModel.Speaker.Local.ToBindingList();
            this.speakerComboBox.DisplayMember = "Name";

            this.categoryComboBox.DataSource = MainForm.self.DBModel.Category.Local.ToBindingList();
            this.categoryComboBox.DisplayMember = "Name";
        }
        /// <summary>
        /// When the speaker or category combo boxes have a different item selected, update the word list's data source to reflect the new value.
        /// </summary>
        /// <param name="sender">Automatically generated by Visual Studio.</param>
        /// <param name="e">Automatically generated by Visual Studio.</param>
        private void SpeakerOrCategoryComboBox_OnSelectedValueChanged(object sender, EventArgs e)
        {
            try
            {
                Speaker spk = speakerComboBox.SelectedItem as Speaker;
                Category cty = categoryComboBox.SelectedItem as Category;
                if (spk == null || cty == null)
                {
                    this.wordListBox.DataSource = null;
                    return;
                }
                // Fetch list from database.
                List<Word> view = MainForm.self.DBModel.Word.Where(
                    x => (x.CategoryId == cty.CategoryId &&
                        x.Recordings.Any(y => y.SpeakerId == spk.SpeakerId))
                    ).ToList();

                view.Sort(new VowelComparer());
                this.wordListBox.DataSource = new BindingSource() { DataSource = view };
                this.wordListBox.DisplayMember = "Name";
            }
            catch(Exception exp)
            {
                Console.WriteLine(exp);
            }
        }
        /// <summary>
        /// Double clicking a word in the word list will play an audio recording of that word.
        /// </summary>
        /// <param name="sender">Automatically generated by Visual Studio.</param>
        /// <param name="e">Automatically generated by Visual Studio.</param>
        private void WordListBox_OnDoubleClick(object sender, EventArgs e)
        {
            try
            {
                MainForm mainForm = this.Parent.Parent as MainForm;
                //Fetch recording from database based on combo box values
                Speaker spk = SpeakerComboBox.SelectedItem as Speaker;
                Word wd = WordListBox.SelectedItem as Word;
                Recording rd = mainForm.DBModel.Recording.Local.Where(x => x.WordId == wd.WordId && x.SpeakerId == spk.SpeakerId).SingleOrDefault();
                if (rd != null)
                {
                    ICollection<SingleFile> audios = rd.Audios;
                    if (audios == null || audios.Count == 0) throw new Exception("No audio recording!");
                    SingleFile sf = audios.PickNext();
                    string filePath = Path.Combine(sf.Address, sf.Name);
                    // Invoke the mainform's audio player to play the recording.
                    mainForm.OperationPanel.NAudioRecorder.AudioPlayer.Play(filePath);
                }
                else
                {
                    MessageBox.Show("Invalid recording!");
                }
            }
            catch (Exception exp)
            {
                MessageBox.Show(exp.Message);
            }
        }
    }
}
