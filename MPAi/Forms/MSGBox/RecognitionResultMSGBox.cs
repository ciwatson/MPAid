using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using System.Windows.Forms;
using MPAi.Cores;
using MPAi.Cores.Scoreboard;
using MPAi.Models;

namespace MPAi.Forms.MSGBox
{
    /// <summary>
    /// Class for the analysis results form.
    /// </summary>
    partial class RecognitionResultMSGBox : Form
    { 
        public MPAiSpeakScoreBoardItem scoreBoardItem;
        /// <summary>
        /// Default constructor.
        /// </summary>
        public RecognitionResultMSGBox()
        {
            InitializeComponent();
        }
        /// <summary>
        /// Populates the text fields when the dialog box is first shown.
        /// </summary>
        /// <param name="recording">The string representing the filename of the recording being analysed.</param>
        /// <param name="target">The string representing what the user is trying to say.</param>
        /// <param name="recognized">The string representing what the user has pronounced.</param>
        /// <returns>The output of the ShowDialog function.</returns>
        public DialogResult ShowDialog(string recording, string target, string recognized)
        {
            this.Text = recording;
            recognitionResultLabel.Text = recognized;
            elseTextBox.Text = target;

            ElseTextBox_Leave(this, EventArgs.Empty);
            return ShowDialog();
        }
        /// <summary>
        /// When the user presses the OK button, creates a scoreboard item from the current analysis.
        /// </summary>
        /// <param name="sender">Automatically generated by Visual Studio.</param>
        /// <param name="e">Automatically generated by Visual Studio.</param>
        private void okButton_Click(object sender, EventArgs e)
        {
            string expectingText = string.IsNullOrEmpty(elseTextBox.Text) ? recognitionResultLabel.Text : elseTextBox.Text;
            string recognisedText = recognitionResultLabel.Text;
            string analysis = descriptionTextBox.Text;

            scoreBoardItem = new MPAiSpeakScoreBoardItem(expectingText, recognisedText, analysis);
        }
        /// <summary>
        /// When the text box loses focus, invokes the pronunciation advisor to write a new recommendation based on what the user has typed.
        /// </summary>
        /// <param name="sender">Automatically generated by Visual Studio.</param>
        /// <param name="e">Automatically generated by Visual Studio.</param>
        private void ElseTextBox_Leave(object sender, EventArgs e)
        {
            try
            {
                descriptionTextBox.Text = PronuciationAdvisor.Advise(this.Text, elseTextBox.Text, recognitionResultLabel.Text);
            }
            catch (Exception exp)
            {
                MessageBox.Show(exp.Message);
            }
        }
    }
}
